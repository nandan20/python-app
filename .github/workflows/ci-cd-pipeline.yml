name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            docker tag $IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/my-app:latest
            docker push $IMAGE_TAG
            docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          fi

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Update Kubernetes Deployment File
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}"
          sed -i "s|image: .*/my-app:.*|image: $IMAGE_TAG|" k8s/deployment.yaml

      - name: Sync Git Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          git pull origin main --rebase --autostash
          
          if ! git diff --quiet k8s/deployment.yaml; then
            git add k8s/deployment.yaml
            git commit -m "Update image to ${{ github.sha }}"
            git push origin main --force-with-lease
          else
            echo "No changes to deployment.yaml"
          fi

      - name: ArgoCD Deployment
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}  # Example: https://your-argo-server.com
          ARGOCD_USER: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASS: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          set -e  # Exit immediately if a command fails

          echo "Testing connection to ArgoCD server..."
          echo "Using ArgoCD Server: $ARGOCD_SERVER"

          # Validate ARGOCD_SERVER URL
          if [[ ! "$ARGOCD_SERVER" =~ ^https?:// ]]; then
            echo "ERROR: ARGOCD_SERVER must start with 'http://' or 'https://'"
            exit 1
          fi

          if ! curl -k -I --connect-timeout 10 "$ARGOCD_SERVER"; then
            echo "ERROR: Cannot reach ArgoCD server at $ARGOCD_SERVER"
            exit 1
          fi

          echo "Installing ArgoCD CLI..."
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

          echo "Logging into ArgoCD..."
          argocd login "$ARGOCD_SERVER" \
            --username="$ARGOCD_USER" \
            --password="$ARGOCD_PASS" \
            --insecure --plaintext

          echo "Starting application sync..."
          argocd app sync my-app --force --timeout 300 --retry-limit 5
          argocd app wait my-app --health
