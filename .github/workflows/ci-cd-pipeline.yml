name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/my-app:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/my-app:latest ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

      - name: Push Docker Image to Docker Hub
        if: github.event_name == 'push'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Update Image Tag in Kubernetes Manifest
        run: |
          sed -i "s|image: .*/my-app:.*|image: ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}|" k8s/deployment.yaml

      - name: Commit and Push Changes
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          # ðŸ”¹ FIX: Stash unstaged changes before pulling
          git stash

          git pull --rebase origin main  # Ensure local repo is up-to-date

          # ðŸ”¹ FIX: Apply stashed changes after pulling
          git stash pop || echo "No stash to apply"

          git add k8s/deployment.yaml
          git commit -m "Update deployment.yaml with new image tag: ${{ github.sha }}" || echo "No changes to commit"
          git push origin main

      - name: Configure Custom SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > my-ec2-key
          chmod 600 my-ec2-key

      - name: Debug SSH Key
        run: |
          echo "Checking SSH Key Format..."
          ls -lah my-ec2-key
          file my-ec2-key
          cat my-ec2-key | head -n 5

      - name: Test SSH Connection
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu  # Change to 'ec2-user' for Amazon Linux
        run: |
          ssh -vvv -o StrictHostKeyChecking=no -i my-ec2-key $EC2_USER@$EC2_HOST "echo 'SSH Connection Successful'"

      - name: SSH into EC2 and Deploy with ArgoCD
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu  # Change to 'ec2-user' for Amazon Linux
        run: |
          ssh -o StrictHostKeyChecking=no -i my-ec2-key $EC2_USER@$EC2_HOST "argocd app sync my-app"
