name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          set -e  # Exit on error
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          
          if [ "$GITHUB_REF" == "refs/heads/main" ]; then
            docker tag $IMAGE_TAG ${{ secrets.DOCKER_USERNAME }}/my-app:latest
            docker push $IMAGE_TAG
            docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          fi

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Flake8
        run: pip install flake8

      - name: Run Flake8 Linting
        run: flake8 app/ --max-line-length=100

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install -r app/requirements.txt pytest

      - name: Run Unit Tests
        run: pytest app/

  sonarcloud:
    runs-on: ubuntu-latest
    needs: [build, lint, test]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=${{ secrets.SONAR_ORG }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT }}
            -Dsonar.host.url=https://sonarcloud.io
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Set the SonarCloud token here

  deploy:
    needs: [sonarcloud]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Update Kubernetes Deployment File
        run: |
          IMAGE_TAG="${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.sha }}"
          sed -i "s|image: .*/my-app:.*|image: $IMAGE_TAG|" k8s/deployment.yaml

      - name: Sync Git Changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          git pull origin main --rebase --autostash || echo "No changes to pull"

          if ! git diff --quiet k8s/deployment.yaml; then
            git add k8s/deployment.yaml
            git commit -m "Update image to $IMAGE_TAG"
            git push origin main --force-with-lease
          else
            echo "No changes to deployment.yaml"
          fi

      - name: ArgoCD Deployment
        env:
          ARGOCD_SERVER: "9d6b-2001-420-c0e0-1004-00-c9.ngrok-free.app"
          ARGOCD_USER: "${{ secrets.ARGOCD_USERNAME }}"
          ARGOCD_PASS: "${{ secrets.ARGOCD_PASSWORD }}"
        run: |
          set -e  # Exit on error

          echo "Using ArgoCD Server: https://$ARGOCD_SERVER"

          if [[ ! "$ARGOCD_SERVER" =~ ^[a-zA-Z0-9.-]+$ ]]; then
            echo "ERROR: Invalid ArgoCD Server format."
            exit 1
          fi

          if ! curl -k -I --connect-timeout 10 "https://$ARGOCD_SERVER:443"; then
            echo "ERROR: Cannot reach ArgoCD server."
            exit 1
          fi

          echo "Installing ArgoCD CLI..."
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

          if ! command -v argocd &> /dev/null; then
            echo "ERROR: ArgoCD CLI installation failed."
            exit 1
          fi

          echo "Logging into ArgoCD..."
          argocd login "$ARGOCD_SERVER" \
            --username="$ARGOCD_USER" \
            --password="$ARGOCD_PASS" \
            --insecure --grpc-web

          echo "Syncing application with ArgoCD..."
          argocd app sync my-app --force --timeout 300 --retry-limit 5 --grpc-web || { echo 'Sync failed'; exit 1; }
          
          argocd app wait my-app --health --grpc-web || { echo 'Wait for health check failed'; exit 1; }
